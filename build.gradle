
//-------------------------------------------- ASCIIDOC:
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.7'
        classpath 'gradle.plugin.org.aim42:htmlSanityCheck:1.0.0-RC-1'
    }
}
//-------------------------------------------- /ASCIIDOC




// Build library: gradlew build
// Install library locally for development with: gradlew install

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.base' version '2.0.0'
    id "com.moowork.node" version "1.3.1"
}



//-------------------------------------------- ASCIIDOC:
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.aim42.htmlSanityCheck'
//-------------------------------------------- /ASCIIDOC




dependencies {
    compile "com.enonic.xp:lib-io:${xpVersion}"
    compile "com.enonic.xp:lib-context:${xpVersion}"
    compile "com.enonic.xp:lib-repo:${xpVersion}"
    compile "com.enonic.xp:lib-node:${xpVersion}"
    compile "com.enonic.xp:lib-portal:${xpVersion}"
    compile "com.enonic.xp:core-api:${xpVersion}"

    compile 'com.enonic.lib:lib-util:2.0.0'
    compile 'com.enonic.lib:lib-cache:1.1.0'

    compile group: 'org.jdom', name: 'jdom', version: '2.0.2'
    compile group: 'org.json', name: 'json', version: '20180813'
    compile group: 'jaxen', name: 'jaxen', version: '1.1.6'
    
    testCompile "com.enonic.xp:testing:${xpVersion}"
}



//-------------------------------------------- ASCIIDOC:
asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')

    requires project.file('verbose-mode.rb')

    attributes 'source-highlighter': 'coderay'

    resources {
        from(sourceDir) {
            include '**/media/**'
        }
    }
}
asciidoctor.inputs.dir("docs")
asciidoctor.outputs.dir("build/docs")

htmlSanityCheck {

    dependsOn asciidoctor

    sourceDir = new File( "$buildDir/docs/html5" )

    // files to check - in Set-notation
    sourceDocuments = [ "index.html"]

    // where to put results of sanityChecks...
    checkingResultsDir = new File( "$buildDir/report/htmlchecks" )
    //checkExternalLinks = false

    // fail build on errors?
    failOnErrors = true
}
//-------------------------------------------- /ASCIIDOC


node {
    download = true
    version = '10.15.3'
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}

npmInstall.inputs.file("package.json")
npmInstall.inputs.file("package-lock.json")
npmInstall.outputs.dir("node_modules")


task babelXP(type: NodeTask) {
    group 'lib-react4xp'
    description 'Compile server-side XP components from ES6'

    script = file('node_modules/babel-cli/bin/babel.js')
    args = ["src/main/resources", "--out-dir", "build/resources/main"]

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
babelXP.dependsOn += 'processResources'
babelXP.dependsOn += 'npmInstall'

def ROOT = project.projectDir.toString() + "/"

task nashornPolyfills(type: NodeTask) {
    group 'lib-react4xp'
    description 'Build default polyfill code, allowing XP to run the (node-written) React server-side rendering in Nashorn'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-nashornpolyfills/webpack.config.js',
            '--env.NASHORNPOLYFILLS_SOURCE=node_modules/react4xp-runtime-nashornpolyfills/nashornPolyfills.es6',

            // (env.BUILD_R4X + env.NASHORNPOLYFILLS_FILENAME) must match ('build/resources/main' + defaultPolyfillFileName)
            // in com/enonic/lib/react4xp/ssr/EngineFactory.java!
            '--env.BUILD_R4X=' + ROOT + 'build/resources/main/lib/enonic/react4xp/default',
            '--env.NASHORNPOLYFILLS_FILENAME=nashornPolyfills'
    ]
}
nashornPolyfills.dependsOn += 'babelXP'

task client(type: NodeTask) {
    group 'lib-react4xp'
    description 'Include the client rendering wrapper in the lib'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-client/webpack.config.js',
            '--env.BUILD_R4X=' + ROOT + 'build/resources/main/services/react4xp-client',
            '--env.BUILD_ENV=production',
            '--env.CHUNK_CONTENTHASH=[name].js',
            '--env.CLIENT_CHUNKS_FILENAME=__delete_me_im_redundant__',

            // Placeholders used in services/react4xp-client/react4xp-client.es6. Keep up to date!
            '--env.LIBRARY_NAME=__REACT4XP__RUNTIME__CLIENT__LIBRARY_NAME__PLACEHOLDER__',
            '--env.SERVICE_ROOT_URL=__REACT4XP__RUNTIME__CLIENT__SERVICE_ROOT_URL__PLACEHOLDER__'
    ]

    doLast {
        def f = new File(ROOT + 'build/resources/main/services/react4xp-client/__delete_me_im_redundant__')
        f.delete()
    }
}
client.dependsOn += 'babelXP'

jar.dependsOn += 'nashornPolyfills'
jar.dependsOn += 'client'
jar.outputs.dir('build/libs')

import groovy.io.FileType
asciidoctor.doLast {
    def files = []
    def dir = new File("build/docs/html5")
    dir.eachFileRecurse(FileType.FILES) { file ->
        def matcher = (file =~ /.*\.(.*)$/)
        def extension = matcher[0][1]
        if (extension in ["htm", "html"]) {
            println("Replacing in [" + file + "]: '(REACT4XP_VERSION)' --> '" + project.properties['version'] + "'")
            ant.replace(file: file, token: "(REACT4XP_VERSION)", value: project.properties['version'])
        }
    }
    //
}
